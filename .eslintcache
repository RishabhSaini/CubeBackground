[{"/home/rishabh/UofT/aboutMe/portfolio/learn-react3fibre/src/index.js":"1","/home/rishabh/UofT/aboutMe/portfolio/learn-react3fibre/src/App.js":"2","/home/rishabh/UofT/aboutMe/portfolio/learn-react3fibre/src/reportWebVitals.js":"3","/home/rishabh/UofT/aboutMe/portfolio/learn-react3fibre/src/Components/Fibre.js":"4","/home/rishabh/UofT/aboutMe/portfolio/learn-react3fibre/src/Components/ColorMaterial.js":"5","/home/rishabh/UofT/aboutMe/portfolio/learn-react3fibre/src/Components/CardComp.js":"6","/home/rishabh/UofT/aboutMe/portfolio/learn-react3fibre/src/Components/ModalPopupProjects.js":"7","/home/rishabh/UofT/aboutMe/portfolio/learn-react3fibre/src/Components/ModalPopupWork.js":"8"},{"size":500,"mtime":1610131574268,"results":"9","hashOfConfig":"10"},{"size":259,"mtime":1610240726707,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1610131574268,"results":"12","hashOfConfig":"10"},{"size":4042,"mtime":1610222623681,"results":"13","hashOfConfig":"10"},{"size":1498,"mtime":1610146652213,"results":"14","hashOfConfig":"10"},{"size":3366,"mtime":1610236713234,"results":"15","hashOfConfig":"10"},{"size":6757,"mtime":1610233397942,"results":"16","hashOfConfig":"10"},{"size":5492,"mtime":1610231478597,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1vkyf86",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rishabh/UofT/aboutMe/portfolio/learn-react3fibre/src/index.js",[],["36","37"],"/home/rishabh/UofT/aboutMe/portfolio/learn-react3fibre/src/App.js",[],"/home/rishabh/UofT/aboutMe/portfolio/learn-react3fibre/src/reportWebVitals.js",[],"/home/rishabh/UofT/aboutMe/portfolio/learn-react3fibre/src/Components/Fibre.js",["38","39","40"],"import React, { useRef, useState } from \"react\";\nimport { Canvas, useFrame } from \"react-three-fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport \"./Fibre.css\";\nimport \"./ColorMaterial\";\nimport clamp from \"clamp\";\nimport {\n  ChromaticAberration,\n  EffectComposer,\n  Bloom,\n  Noise,\n  Vignette,\n  DotScreen,\n  HueSaturation,\n} from \"react-postprocessing\";\n\nimport { BlendFunction } from \"postprocessing\";\n\nvar colors = require(\"nice-color-palettes\");\n\nconsole.log(colors.length);\nlet pallete = colors[96];\n\nconst Fibre = () => {\n  const easeInOutQuint = function (pos) {\n    if ((pos /= 0.5) < 1) return 0.5 * Math.pow(pos, 5);\n    return 0.5 * (Math.pow(pos - 2, 5) + 2);\n  };\n\n  const tempObject = new THREE.Object3D();\n  function Box({ count }) {\n    // This reference will give us direct access to the mesh\n    const mesh = useRef();\n\n    // Rotate mesh every frame, this is outside of React without overhead\n    useFrame((state) => {\n      //mesh.current.rotation.x = mesh.current.rotation.y += 0.01;\n      //console.log(state);\n\n      let i = 0;\n      let time = state.clock.getElapsedTime() % 6;\n      let playhead = time / 6;\n      let number = count;\n      for (let x = 0; x <= number; x++) {\n        for (let z = 0; z <= number; z++) {\n          let offset =\n            Math.sqrt((x / number - 0.5) ** 2 + (z / number - 0.5) ** 2) /\n            Math.sqrt(0.5 ** 2 + 0.5 ** 2);\n          const id = i++;\n          let progress = easeInOutQuint(\n            clamp((playhead - 0.4 * offset) / 0.6, 0, 1)\n          );\n          tempObject.position.set(\n            30 * (x / number - 0.5) + progress * 1.5,\n            offset * 0,\n            30 * (z / number - 0.5)\n          );\n          //tempObject.rotation.y = Math.sin(x / 4 + time) + Math.sin(x / 4 + time);\n          tempObject.rotation.y = progress * Math.PI * 2;\n          let sine = Math.sin(progress * Math.PI);\n          const scale = 1;\n          tempObject.scale.set(\n            scale + 0.5 * sine,\n            scale + 0.5 * sine,\n            scale + 0.5 * sine\n          );\n          tempObject.updateMatrix();\n          mesh.current.setMatrixAt(id, tempObject.matrix);\n        }\n      }\n      mesh.current.instanceMatrix.needsUpdate = true;\n    });\n    return (\n      <instancedMesh ref={mesh} args={[null, null, 1000]}>\n        <boxBufferGeometry args={[0.3, 3.3, 0.3]} />\n        {/* <meshStandardMaterial color={\"hotpink\"} /> */}\n        <colorMaterial\n          color={pallete[1]}\n          color1={pallete[2]}\n          color2={pallete[3]}\n          attach=\"material\"\n        />\n      </instancedMesh>\n    );\n  }\n\n  function CameraMovement() {\n    useFrame(({ clock, camera }) => {\n      var rotSpeed = 0.0003;\n      var x = camera.position.x;\n      var y = camera.position.y;\n      var z = camera.position.z;\n      camera.position.y = y * Math.cos(rotSpeed) + z * Math.sin(rotSpeed);\n      camera.position.z = z * Math.cos(rotSpeed) - y * Math.sin(rotSpeed);\n    });\n    return null;\n  }\n\n  return (\n    <Canvas\n      onCreated={({ gl }) => {\n        gl.setClearColor(pallete[4]);\n      }}\n      camera={{ position: [0, 10, 0] }}\n    >\n      <ambientLight />\n      <pointLight position={[10, 10, 10]} />\n      <Box position={[0, 0, 0]} count={20} />\n      <EffectComposer>\n        <ChromaticAberration offset={[-0.001, 0.005]} />\n        <Bloom luminanceThreshold={0} luminanceSmoothing={0.9} height={300} />\n        <Noise opacity={0.02} />\n        <Vignette eskil={false} offset={0.1} darkness={1.1} />\n        {/* <DotScreen\n          blendFunction={BlendFunction.NORMAL} // blend mode\n          angle={Math.PI * 0.5} // angle of the dot pattern\n          scale={0.9} // scale of the dot pattern\n        /> */}\n        <HueSaturation\n          blendFunction={BlendFunction.NORMAL} // blend mode\n          hue={0} // hue in radians\n          saturation={0.2} // saturation in radians\n        />\n      </EffectComposer>\n      <CameraMovement />\n      <OrbitControls />\n    </Canvas>\n  );\n};\n\nexport default Fibre;\n","/home/rishabh/UofT/aboutMe/portfolio/learn-react3fibre/src/Components/ColorMaterial.js",[],"/home/rishabh/UofT/aboutMe/portfolio/learn-react3fibre/src/Components/CardComp.js",[],"/home/rishabh/UofT/aboutMe/portfolio/learn-react3fibre/src/Components/ModalPopupProjects.js",[],"/home/rishabh/UofT/aboutMe/portfolio/learn-react3fibre/src/Components/ModalPopupWork.js",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":1,"column":25,"nodeType":"47","messageId":"48","endLine":1,"endColumn":33},{"ruleId":"45","severity":1,"message":"49","line":14,"column":3,"nodeType":"47","messageId":"48","endLine":14,"endColumn":12},{"ruleId":"45","severity":1,"message":"50","line":91,"column":11,"nodeType":"47","messageId":"48","endLine":91,"endColumn":12},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'DotScreen' is defined but never used.","'x' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]